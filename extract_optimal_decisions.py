from tqdm import tqdm
import numpy as np
import argparse

parser = argparse.ArgumentParser(description='Tool to extract admission decision from the optimal trace')
parser.add_argument("trace", type=str, help="Trace filename")
parser.add_argument("output", type=str, help="Path to result trace")
parser.add_argument('-o', '--opt', action='store_true', help="If trace is generated by FOO or PFOO")

args = parser.parse_args()

hits = []
ids = []
data_file = open(args.res, 'r')
print 'Reading'
for line in tqdm(data_file):
    df = line.split(' ')
    if args.opt:
        hits.append(round(float(df[3])))
    else:
        hits.append(round(float(df[4])))
    ids.append(int(df[0]))

hits = np.asarray(hits)
ids = np.asarray(ids)

ids_unique = np.unique(ids)

print 'Sequence collection'

ids_seqs = {}
for oid in tqdm(ids_unique):
    ids_seqs[oid] = []

for i in tqdm(range(len(ids))):
    ids_seqs[ids[i]].append(hits[i])

print 'Admissions collection'

admissions = {}
for oid in tqdm(ids_unique):
    admissions[oid] = []

ones = 0
zeros = 0
for key in tqdm(ids_unique):
    seq = ids_seqs[key]
    for i in range(0, len(seq) - 1):
        if seq[i] == 0 and seq[i + 1] == 1:
            admissions[key].append(1)
            ones += 1
            continue
        if seq[i] == 0 and seq[i + 1] == 0:
            admissions[key].append(0)
            zeros += 1
            continue
        admissions[key].append(-1)
    admissions[key].append(0)

print 'Ones', ones, 'Zeros', zeros

print 'Recreation'
admissions_recreated = [0] * len(ids)
counters = dict(zip(ids_unique, [0] * len(ids_unique)))
for i in tqdm(range(len(ids))):
    oid = ids[i]
    admissions_recreated[i] = admissions[oid][counters[oid]]
    counters[oid] += 1

np.save(args.output, admissions_recreated)
